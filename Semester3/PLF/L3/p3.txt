;Sa se construiască o funcție care verifica daca un atom este membru al unei liste nu neaparat liniara
#|
Model matematic
sau(l1..ln)	=nil, n = 0
			=t, l1 = t
			=sau(l2..ln), altfel

verif(l1..ln, e)	= (t), e = l - implica faptul ca l este atom
			= U(verif(l1, e),...,verif(ln, e)), l e lista
			= (nil), altfel 

apare(L, e) = sau(verif(L,e))

Cazuri de testare
(apare '(1 2 (2 3 (4 (5)) 6) 7) 5) => T
(apare '(1 2 (2 3 (4 (5)) 6) 7) 9) => NIL
|#

(defun sau(L)
	(cond 
		((null L) nil)
		((equal t (car L)) t)
		(t (sau (cdr l)))
	)
)

(defun verif(L e)
	(cond
		((equal L e) (list t))
		((listp L)(apply #'append (mapcar #'(lambda(L)(verif L e)) L)))
		(t (list nil))
	)
)

(defun apare(L e)
	(sau (verif L e))
)



#|
METODA 2

membru(l, e)	= true, l = e
			= false, l != e si l atom
			= SAU(membru(l1)...membru(ln)), l=(l1..ln) lista

sau(l1..ln)	= false, n=0
			= true, l1 = t
			= sau(l2..ln), altfel

|#

(Defun membru(l e)
	(cond
		((equal l e) t)
		((atom l) nil)
		(t (sau (mapcar #'(lambda(L)(membru L e)) l)))
	)
)

