#|

cale(l1..ln,e)	= (), n = 0
			= (), e nu apare in l1..ln
			= (l1), l1 = e
			= l1(+)cale(st√¢ng(l1..ln)), e apare in l2
			= l1(+)cale(drept(l1..ln)), e apare in l3

apare(l1..ln,e)	= false, n = 0 
			= true, l1 = e
			= apare(l2,e) or (apare(l3,e)

|#

(Defun stang(l)
	(aux (cddr l) 0 0)
)

(Defun aux(l nv nm)
	(cond
		((null l) nil)
		((= nv (+ nm 1)) nil)
		(t (cons (car l) (cons (cadr l) (aux (cddr l) (+ nv 1) (+ nm (cadr l))))))
	)
)

(Defun drept(l)
	(aux2 (cddr l) 0 0)
)

(Defun aux2(l nv nm)
	(cond
		((null l) nil)
		((= nv (+ nm 1)) l)
		(t (aux2 (cddr l) (+ nv  1) (+ nm (cadr l))))
	)
)


(Defun apare(l e)
	(cond 
		((null l) nil)
		((equal (car l) e) t)
		(t (or (apare (stang l) e) (apare (drept l) e)))
	)
)

(Defun cale(l e)
	(cond 
		((null l) nil)
		((equal (car l) e) (list e))
		((apare (stang l) e) (cons (car l) (cale (stang l) e)))
		((apare (drept l) e) (cons (car l) (cale (drept l) e)))
		(t nil)
	)
)














